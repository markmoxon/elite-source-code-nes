# NI% = 42          \ Sometimes need to do NI%-4

# NOSH = 8          \ As UNIV contains 9 addresses, 0 to NOSH

# NOST = 20

# VE = &57
# LL = 29

# MSL = 1
# SST = 2
# PLT = 4
# SHU = 9
# ANA = 14
# HER = 15
# COPS = 16
# SH3 = 17
# WRM = 23
# THG = 29
# TGL = 30

# CYL = 11
# CYL2 = &18

# solaun = 9

# Variables

label(0x0000, "ZP")
label(0x0002, "RAND")
label(0x0002, "RAND_1")
label(0x0003, "RAND_2")
label(0x0004, "RAND_3")
label(0x0006, "T1")
label(0x0007, "SC")
label(0x0008, "SC_1")
label(0x0009, "XX1")
label(0x0009, "INWK")
label(0x000A, "INWK_1")
label(0x000B, "INWK_2")
label(0x000C, "INWK_3")
label(0x000D, "INWK_4")
label(0x000E, "INWK_5")
label(0x000F, "INWK_6")
label(0x0010, "INWK_7")
label(0x0011, "INWK_8")
label(0x0012, "INWK_9")
label(0x0013, "INWK_10")
label(0x0014, "INWK_11")
label(0x0015, "INWK_12")
label(0x0016, "INWK_13")
label(0x0017, "INWK_14")
label(0x0018, "INWK_15")
label(0x0019, "INWK_16")
label(0x001A, "INWK_17")
label(0x001B, "INWK_18")
label(0x001C, "INWK_19")
label(0x001D, "INWK_20")
label(0x001E, "INWK_21")
label(0x001F, "INWK_22")
label(0x0020, "INWK_23")
label(0x0021, "INWK_24")
label(0x0022, "INWK_25")
label(0x0023, "INWK_26")
label(0x0024, "INWK_27")
label(0x0025, "INWK_28")
label(0x0026, "INWK_29")
label(0x0027, "INWK_30")
label(0x0028, "INWK_31")
label(0x0029, "INWK_32")
label(0x002A, "INWK_33")            # No heap in NES Elite, so this is reused
label(0x002B, "INWK_34")            # No heap in NES Elite, so this is reused
label(0x002C, "INWK_35")            # Is this used? NI% is one bigger than in Master
label(0x002D, "NEWB")
label(0x002F, "P")
label(0x0030, "P_1")
label(0x0031, "P_2")
label(0x0032, "XC")
label(0x003B, "YC")
label(0x003C, "QQ17")
label(0x003D, "K3")
label(0x003D, "XX2")
label(0x003E, "XX2_1")
label(0x003F, "XX2_2")
label(0x0040, "XX2_3")
label(0x0041, "XX2_4")
label(0x0042, "XX2_5")
label(0x0043, "XX2_6")
label(0x0044, "XX2_7")
label(0x0045, "XX2_8")
label(0x0046, "XX2_9")
label(0x0047, "XX2_10")
label(0x0048, "XX2_11")
label(0x0049, "XX2_12")
label(0x004A, "XX2_13")
label(0x004B, "K4")
label(0x004C, "K4_1")
label(0x004D, "XX16")
label(0x004E, "XX16_1")
label(0x004F, "XX16_2")
label(0x0050, "XX16_3")
label(0x0051, "XX16_4")
label(0x0052, "XX16_5")
label(0x0053, "XX16_6")
label(0x0054, "XX16_7")
label(0x0055, "XX16_8")
label(0x0056, "XX16_9")
label(0x0057, "XX16_10")
label(0x0058, "XX16_11")
label(0x0059, "XX16_12")
label(0x005A, "XX16_13")
label(0x005B, "XX16_14")
label(0x005C, "XX16_15")
label(0x005D, "XX16_16")
label(0x005E, "XX16_17")
label(0x005F, "XX0")
label(0x0060, "XX0_1")
label(0x0061, "XX19")
label(0x0061, "INF")
label(0x0062, "INF_1")
label(0x0063, "V")
label(0x0064, "V_1")
label(0x0065, "XX")
label(0x0066, "XX_1")
label(0x0067, "YY")
label(0x0068, "YY_1")
label(0x0069, "BETA")
label(0x006A, "BET1")
label(0x006B, "QQ22")
label(0x006C, "QQ22_1")
label(0x006D, "ECMA")
label(0x006E, "ALP1")
label(0x006F, "ALP2")
label(0x0070, "ALP2_1")
label(0x0071, "XX15")
label(0x0071, "X1")
label(0x0072, "Y1")
label(0x0073, "X2")
label(0x0074, "Y2")
label(0x0075, "XX15_4")
label(0x0076, "XX15_5")
label(0x0077, "XX12")
label(0x0078, "XX12_1")
label(0x0079, "XX12_2")
label(0x007A, "XX12_3")
label(0x007B, "XX12_4")
label(0x007C, "XX12_5")
label(0x007D, "K")
label(0x007E, "K_1")
label(0x007F, "K_2")
label(0x0080, "K_3")
label(0x0082, "QQ15")
label(0x0083, "QQ15_1")
label(0x0084, "QQ15_2")
label(0x0085, "QQ15_3")
label(0x0086, "QQ15_4")
label(0x0087, "QQ15_5")
label(0x0088, "K5")
label(0x0088, "XX18")
label(0x0089, "XX18_1")
label(0x008A, "XX18_2")
label(0x008B, "XX18_3")
label(0x008C, "K6")
label(0x008D, "K6_1")
label(0x008E, "K6_2")
label(0x008F, "K6_3")
label(0x0090, "K6_4")
label(0x0091, "BET2")
label(0x0092, "BET2_1")
label(0x0093, "DELTA")
label(0x0094, "DELT4")
label(0x0095, "DELT4_1")
label(0x0096, "U")
label(0x0097, "Q")
label(0x0098, "R")
label(0x0099, "S")
label(0x009A, "T")
label(0x009B, "XSAV")
label(0x009C, "YSAV")
label(0x009D, "XX17")
label(0x009E, "QQ11")
label(0x009F, "QQ11Mask")          # Mine, can be 0, &FF or QQ11
label(0x00A0, "ZZ")
label(0x00A1, "XX13")
label(0x00A2, "MCNT")
label(0x00A3, "TYPE")
label(0x00A4, "ALPHA")
label(0x00A5, "QQ12")
label(0x00A6, "TGT")
label(0x00A7, "FLAG")
label(0x00A8, "CNT")
label(0x00A9, "CNT2")
label(0x00AA, "STP")
label(0x00AB, "XX4")
label(0x00AC, "XX20")
label(0x00AE, "RAT")
label(0x00AF, "RAT2")
label(0x00B0, "widget")
label(0x00B1, "Yx1M2")              # Mine = height of screen for text screens?
label(0x00B2, "Yx2M2")              # Mine = 2 x Yx1M2
label(0x00B3, "Yx2M1")
label(0x00B4, "messXC")
label(0x00B6, "newzp")

label(0x00B8, "tileNumber")         # Mine, contains tile number to draw into
label(0x00B9, "pattBufferHi")       # Mine, high byte of current pattern buffer (&60 or &68)

label(0x00BA, "SC2")                # Mine, typically an address that's used alongside
label(0x00BB, "SC2_1")              # SC(1 0)

label(0x00C0, "tileIndex")          # Mine, used to store an index into table? 0 or 1
label(0x00C1, "tileNumber0")        # Mine, used to store tile numbers in a table
label(0x00C2, "tileNumber0_1")
label(0x00C3, "tileNumber1")
label(0x00C4, "tileNumber1_1")
label(0x00C5, "tileNumber2")
label(0x00C6, "tileNumber2_2")
label(0x00C7, "tileNumber3")
label(0x00C8, "tileNumber3_1")

label(0x00D4, "addr1")              # Mine, an address within the PPU to be poked to
label(0x00D5, "addr1_1")

label(0x00E6, "nameBufferHi")       # Mine, high byte of current nametable buffer (&70 or &74)

label(0x00E9, "dashboardSwitch")    # Mine, a flag to control whether we switch to
                                    # nametable 0 and palette 0 for the dashboard

label(0x00EB, "addr4")              # Mine, an address within the PPU to be poked to
label(0x00EC, "addr4_1")
label(0x00ED, "addr5")              # Mine, an address to fetch PPU data from
label(0x00EE, "addr5_1")

label(0x00F1, "addr6")              # Mine
label(0x00F2, "addr6_1")

label(0x00F5, "ppuCtrlCopy")        # Mine, contains a copy of PPU_CTRL

label(0x00F7, "currentBank")        # Mine, contains lower bank number

label(0x00FA, "addr2")              # Mine, an address within the PPU to be poked to
label(0x00FB, "addr2_1")

label(0x0100, "XX3")
label(0x0101, "XX3_1")

for i in range(0, 64):
    label(0x0200 + i * 4, "SPR_" + str(i).zfill(2) + "_Y")
    label(0x0201 + i * 4, "SPR_" + str(i).zfill(2) + "_TILE")
    label(0x0202 + i * 4, "SPR_" + str(i).zfill(2) + "_ATTR")
    label(0x0203 + i * 4, "SPR_" + str(i).zfill(2) + "_X")

label(0x036A, "FRIN")
label(0x0373, "JUNK")
label(0x0389, "ECMP")
label(0x038A, "MJ")
label(0x038B, "CABTMP")
label(0x038C, "LAS2")
label(0x038E, "VIEW")
label(0x038F, "LASCT")
label(0x0390, "GNTMP")
label(0x0392, "EV")
label(0x0396, "NAME")
label(0x039E, "TP")
label(0x039F, "QQ0")
label(0x03A0, "QQ1")
label(0x03A1, "CASH")
label(0x03A5, "QQ14")
label(0x03A7, "GCNT")
label(0x03A8, "LASER")
label(0x03AC, "CRGO")
label(0x03AD, "QQ20")
label(0x03BF, "BST")
label(0x03C0, "BOMB")
label(0x03C1, "ENGY")
label(0x03C2, "DKCMP")
label(0x03C3, "GHYP")
label(0x03C4, "ESCP")
label(0x03C5, "TRIBBLE")
label(0x03C6, "TRIBBLE_1")
label(0x03C8, "NOMSL")
label(0x03C9, "FIST")
label(0x03CA, "AVL")
label(0x03DB, "QQ26")
label(0x03DC, "TALLY")
label(0x03DD, "TALLY_1")
label(0x03DF, "QQ21")
label(0x03E5, "NOSTM")
label(0x03F1, "frameCounter")       # Mine, increments every VBlank
label(0x03F3, "DTW6")
label(0x03F4, "DTW2")
label(0x03F5, "DTW3")
label(0x03F6, "DTW4")
label(0x03F7, "DTW5")
label(0x03F8, "DTW1")
label(0x03F9, "DTW8")
label(0x03FA, "XP")
label(0x03FB, "YP")
label(0x0400, "LAS")
label(0x0401, "MSTG")
label(0x0403, "KL")
label(0x0403, "KY1")
label(0x0404, "KY2")
label(0x0405, "KY3")
label(0x0406, "KY4")
label(0x0407, "KY5")
label(0x0408, "KY6")
label(0x0409, "KY7")
label(0x044D, "QQ19")
label(0x044E, "QQ19_1")
label(0x044F, "QQ19_2")
label(0x0450, "QQ19_3")
label(0x0450, "QQ19_4")
label(0x0459, "K2")
label(0x045A, "K2_1")
label(0x045B, "K2_2")
label(0x045C, "K2_3")
label(0x045D, "DLY")
label(0x046C, "pictureTile")       # Mine, the number of the first tile where system pictures are stored
label(0x0476, "JSTX")
label(0x0477, "JSTY")
label(0x046E, "boxEdge1")          # Mine, bitmap for drawing box edge?
label(0x046F, "boxEdge2")          # Mine, bitmap for drawing box edge?
label(0x0475, "scanController2")   # Mine, if non-zero, scan controller 2
label(0x047B, "LASX")
label(0x047C, "LASY")
label(0x047E, "ALTIT")
label(0x047F, "SWAP")
label(0x0481, "XSAV2")
label(0x0482, "YSAV2")
label(0x0484, "FSH")
label(0x0485, "ASH")
label(0x0486, "ENERGY")
label(0x0487, "QQ24")
label(0x0488, "QQ25")
label(0x0489, "QQ28")
label(0x048A, "QQ29")
label(0x048B, "systemFlag")         # Mine, contains a new generated value for current system
                                    # Bits 0-3 contain system image number from bank 5
                                    # Bits 6 and 7 are set in bank 5 routine
label(0x048C, "gov")
label(0x048D, "tek")
label(0x048E, "QQ2")
label(0x0494, "QQ3")
label(0x0495, "QQ4")
label(0x0496, "QQ5")
label(0x049B, "QQ8")
label(0x049C, "QQ8_1")
label(0x049D, "QQ9")
label(0x049E, "QQ10")
label(0x04A4, "QQ18Lo")             # Mine, gets set to address of token table
label(0x04A5, "QQ18Hi")             #   that ex then accesses
label(0x04A6, "TKN1Lo")             # Mine, gets set to address of token table
label(0x04A7, "TKN1Hi")             #   that DETOK then accesses
label(0x04A8, "language")           # Mine
label(0x04AA, "controller1Down")    # Mine
label(0x04AB, "controller2Down")    # Mine
label(0x04AC, "controller1Up")      # Mine
label(0x04AD, "controller2Up")      # Mine
label(0x04AE, "controller1Left")    # Mine
label(0x04AF, "controller2Left")    # Mine
label(0x04B0, "controller1Right")   # Mine
label(0x04B1, "controller2Right")   # Mine
label(0x04B2, "controller1A")       # Mine
label(0x04B3, "controller2A")       # Mine
label(0x04B4, "controller1B")       # Mine
label(0x04B5, "controller2B")       # Mine
label(0x04B6, "controller1Start")   # Mine
label(0x04B7, "controller2Start")   # Mine
label(0x04B8, "controller1Select")  # Mine
label(0x04B9, "controller2Select")  # Mine
label(0x04C8, "SX")
label(0x04DD, "SY")
label(0x04F2, "SZ")
label(0x0506, "BUFm1")
label(0x0507, "BUF")
label(0x0508, "BUF_1")
label(0x0561, "HANGFLAG")
label(0x0562, "MANY")
label(0x0564, "SSPR")
label(0x05A5, "SXL")
label(0x05BA, "SYL")
label(0x05CF, "SZL")
label(0x05E4, "safehouse")

label(0x0600, "Kpercent")

# NES registers

label(0x2000, "PPU_CTRL")
label(0x2001, "PPU_MASK")
label(0x2002, "PPU_STATUS")
label(0x2003, "OAM_ADDR")
label(0x2004, "OAM_DATA")
label(0x2005, "PPU_SCROLL")
label(0x2006, "PPU_ADDR")
label(0x2007, "PPU_DATA")
label(0x4014, "OAM_DMA")

label(0x4000, "SQ1_ENV")
label(0x4001, "SQ1_SWEEP")
label(0x4002, "SQ1_LO")
label(0x4003, "SQ1_HI")
label(0x4004, "SQ2_ENV")
label(0x4005, "SQ2_SWEEP")
label(0x4006, "SQ2_LO")
label(0x4007, "SQ2_HI")
label(0x4008, "TRI_CTRL")
label(0x400A, "TRI_LO")
label(0x400B, "TRI_HI")
label(0x400C, "NOI_ENV")
label(0x400E, "NOI_RAND")
label(0x400F, "NOI_LEN")
label(0x4015, "APU_FLAGS")
label(0x4016, "CONTROLLER_1")
label(0x4017, "CONTROLLER_2")

# Battery-backed WRAM in the cartridge

label(0x6000, "pattBuffer0")         # Mine, two buffers for tile patterns
label(0x6800, "pattBuffer1")

label(0x7000, "nameBuffer0")         # Mine, two buffers for nametables
label(0x7400, "nameBuffer1")

# Permanently loaded labels in 7.asm ($C000-$FFFF)

label(0xC0DF, "LC0DF")              # Mine
label(0xC100, "log")
label(0xC200, "logL")
label(0xC300, "antilog")
label(0xC400, "antilogODD")
label(0xC500, "SNE")
label(0xC520, "ACT")
label(0xC53E, "XX21m2")
label(0xC53F, "XX21m1")
label(0xC540, "XX21")
label(0xCE7E, "UNIV")
label(0xCE7F, "UNIV_1")
label(0xCED0, "nameBufferAddr")     # Mine, contains high byte of name buffers (&70, &74)
label(0xCED2, "pattBufferAddr")     # Mine, contains high byte of pattern buffers (&60, &68)
label(0xD9F7, "TWOS")
label(0xDA01, "TWOS2")
label(0xDA09, "TWFL")
label(0xDA10, "TWFR")
label(0xDA18, "yLookupLo")          # Mine
label(0xDAF8, "yLookupHi")          # Mine
label(0xEC3C, "noiseLookup1")       # Mine
label(0xEC5C, "noiseLookup2")       # Mine
label(0xF333, "LF333")              # Mine

subroutine(0xC007, "Spercent")
subroutine(0xC0AD, "ResetBank")     # Mine, switch bank to stack value
subroutine(0xC0AE, "SetBank")       # Mine, switch bank to A
subroutine(0xC03E, "ResetVariables")
subroutine(0xC0A8, "subm_C0A8")
subroutine(0xC582, "subm_C582")
subroutine(0xC5D2, "subm_C5D2")
subroutine(0xC630, "subm_C630")
subroutine(0xC6C0, "subm_C6C0")
subroutine(0xC6C6, "subm_C6C6")
subroutine(0xC6F4, "subm_C6F4")
subroutine(0xC836, "subm_C836")
subroutine(0xCA56, "subm_CA56")
subroutine(0xCB42, "subm_CB42")
subroutine(0xCB9C, "subm_CB9C")
subroutine(0xCC1F, "subm_CC1F")
subroutine(0xCC2E, "SendToPPU1")    # Mine, something to do with sending to PPU?
subroutine(0xCD34, "CopyNametable0To1")    # Mine, copies nametable buffer 0 to buffer 1
subroutine(0xCD62, "subm_CD62")
subroutine(0xCD6F, "DrawBoxEdges")  # Mine, draw space view box edges?
subroutine(0xCE90, "GINF")
subroutine(0xCED4, "IRQ")           # Mine, IRQ handler
subroutine(0xCED5, "NMI")           # Mine, NMI handler
subroutine(0xCE9E, "subm_CE9E")
subroutine(0xCEA5, "subm_CEA5")
subroutine(0xCF2E, "SetPalette")    # Mine, set PPU palette?
subroutine(0xD02D, "ResetNametable1")  # Mine, does this clear down nametable 1?
subroutine(0xD0F8, "ReadControllers")   # Mine, reads controllers
subroutine(0xD06D, "SwitchTablesTo0")    # Mine, switches PPU to nametable/palette table 0
subroutine(0xD164, "SetTable0UntilNMI2")
subroutine(0xD167, "SetTable0UntilNMI")
subroutine(0xD710, "FillMemory")    # Mine, something to do with memory filling?
subroutine(0xD8C5, "subm_D8C5")
subroutine(0xD8E1, "subm_D8E1")
subroutine(0xD8EC, "subm_D8EC")
subroutine(0xD908, "subm_D908")
subroutine(0xD919, "subm_D919")
subroutine(0xD933, "subm_D933")
subroutine(0xD946, "subm_D946")
subroutine(0xD951, "subm_D951")
subroutine(0xD96F, "subm_D96F")
subroutine(0xD986, "SendToPPU2")    # Mine, something to do with sending to PPU?
subroutine(0xDC0F, "LOIN")
subroutine(0xDEA5, "subm_DEA5")
subroutine(0xDF76, "subm_DF76")
subroutine(0xE04A, "subm_E04A")
subroutine(0xE0BA, "subm_E0BA")
subroutine(0xE18E, "subm_E18E")
subroutine(0xE33E, "subm_E33E")
subroutine(0xE4F0, "PIXEL")
subroutine(0xE543, "DrawDash")      # Mine, draws two pixel dash in space view
subroutine(0xE596, "ECBLB2")
subroutine(0xE59F, "MSBAR")
subroutine(0xE802, "subm_E802")
subroutine(0xE8DE, "subm_E8DE")
subroutine(0xE802, "subm_E802")
subroutine(0xE909, "subm_E909")
subroutine(0xE91D, "subm_E91D")
subroutine(0xEA8D, "subm_EA8D")
subroutine(0xEAB0, "subm_EAB0")
subroutine(0xEB0D, "subm_EB0D")
subroutine(0xEB19, "subm_EB19")
subroutine(0xEB67, "subm_EB67")
subroutine(0xEB86, "subm_EB86")
subroutine(0xEBA2, "DELAY")
subroutine(0xEBA9, "BEEP")
subroutine(0xEBAD, "EXNO3")
subroutine(0xEBBF, "ECBLB")
subroutine(0xEBE5, "BOOP")
subroutine(0xEBF2, "NOISE")
subroutine(0xEC7D, "CheckDashboardA")   # CHECK_DASHBOARD macro that preserves A
subroutine(0xEC8D, "LDA_XX0_Y")
subroutine(0xECA0, "LDA_Epc_Y")
subroutine(0xECAE, "IncreaseTally")     # Mine, adds KWL/KWH to TALLY
subroutine(0xECE2, "CB1D4_b0")
subroutine(0xECF9, "Set_K_K3_XC_YC")    # Temporary name
subroutine(0xED16, "C811E_b6")
subroutine(0xED24, "C8021_b6")
subroutine(0xED24, "C8021_b6")
subroutine(0xED50, "C89D1_b6")
subroutine(0xED6B, "ResetSound_b6")
subroutine(0xED6E, "ResetSoundNow_b6")
subroutine(0xED81, "CBF41_b5")
subroutine(0xED8F, "CB9F9_b4")
subroutine(0xED9D, "CB96B_b4")
subroutine(0xEDAB, "CB63D_b3")
subroutine(0xEDB9, "CB88C_b6")
subroutine(0xEDC7, "LL9_b1")
subroutine(0xEDDC, "CBA23_b3")
subroutine(0xEDEA, "TIDY_b1")
subroutine(0xEDFF, "TITLE_b6")
subroutine(0xEE0D, "SpawnDemoShips_b0")
subroutine(0xEE15, "STARS_b1")
subroutine(0xEE3F, "SUN_b1")
subroutine(0xEE54, "CB2FB_b3")
subroutine(0xEE62, "CB219_b3")
subroutine(0xEE78, "CB9C1_b4")
subroutine(0xEE8B, "CA082_b6")
subroutine(0xEE99, "CA0F8_b6")
subroutine(0xEEA7, "CB882_b4")
subroutine(0xEEB5, "CA4A5_b6")
subroutine(0xEEC3, "CB2EF_b0")
subroutine(0xEED3, "CB9E2_b3")
subroutine(0xEEE8, "CB673_b3")
subroutine(0xEEF6, "CB2BC_b3")
subroutine(0xEF04, "CB248_b3")
subroutine(0xEF12, "CBA17_b6")
subroutine(0xEF20, "CAFCD_b3")
subroutine(0xEF35, "CBE52_b6")
subroutine(0xEF43, "CBED2_b6")
subroutine(0xEF51, "CB0E1_b3")
subroutine(0xEF6C, "CB18E_b3")
subroutine(0xEF7A, "PAS1_b0")
subroutine(0xEF88, "SetSystemImage_b5")
subroutine(0xEF96, "GetSystemImage_b5")
subroutine(0xEFA4, "CB93C_b4")
subroutine(0xEFB2, "CB8F9_b4")
subroutine(0xEFC0, "CA2C3_b6")
subroutine(0xEFCE, "CBA63_b6")
subroutine(0xEFDC, "CB39D_b0")
subroutine(0xEFF7, "LL164_b6")
subroutine(0xF005, "CB919_b6")
subroutine(0xF013, "CA166_b6")
subroutine(0xF021, "CBBDE_b6")
subroutine(0xF02F, "CBB37_b6")
subroutine(0xF03D, "CB8FE_b6")
subroutine(0xF04B, "CB90D_b6")
subroutine(0xF059, "CA5AB_b6")
subroutine(0xF06F, "subm_F06F")
subroutine(0xF074, "BEEP_b7")
subroutine(0xF082, "DETOK_b2")
subroutine(0xF09D, "DTS_b2")
subroutine(0xF0B8, "PDESC_b2")
subroutine(0xF0C6, "CAE18_b3")
subroutine(0xF0E1, "CAC1D_b3")
subroutine(0xF0FC, "CA730_b3")
subroutine(0xF10A, "CA775_b3")
subroutine(0xF118, "DrawTitleScreen_b3")
subroutine(0xF126, "CA7B7_b3")
subroutine(0xF139, "CA9D1_b3")
subroutine(0xF15C, "CA972_b3")
subroutine(0xF171, "CAC5C_b3")
subroutine(0xF186, "C8980_b0")
subroutine(0xF194, "CB459_b6")
subroutine(0xF1A2, "MVS5_b0")
subroutine(0xF1BD, "HALL_b1")
subroutine(0xF1CB, "CHPR_b2")
subroutine(0xF1E6, "DASC_b2")
subroutine(0xF201, "TT27_b2")
subroutine(0xF21C, "ex_b2")
subroutine(0xF237, "TT27_b0")    # Control code part of TT27 in bank 0
subroutine(0xF245, "BR1_b0")
subroutine(0xF25A, "CBAF3_b1")
subroutine(0xF26E, "TT66_b0")
subroutine(0xF280, "CLIP_b1")
subroutine(0xF293, "CB341_b3")
subroutine(0xF2A8, "SCAN_b1")
subroutine(0xF2BD, "C8926_b0")
subroutine(0xF2CE, "subm_F2CE")
subroutine(0xF2DE, "CLYNS")
subroutine(0xF338, "subm_F338")
subroutine(0xF359, "subm_F359")
subroutine(0xF362, "subm_F362")
subroutine(0xF3BC, "subm_F3BC")
subroutine(0xF42A, "subm_F42A")
subroutine(0xF42E, "Ze")
subroutine(0xF454, "subm_F454")
subroutine(0xF46A, "NLIN3")
subroutine(0xF473, "NLIN4")
subroutine(0xF48D, "subm_F48D")
subroutine(0xF493, "subm_F493")
subroutine(0xF4AC, "DORND2")
subroutine(0xF4AD, "DORND")
subroutine(0xF4C1, "PROJ")
subroutine(0xF4FB, "subm_F4FB")
subroutine(0xF52D, "UnpackToRAM")
subroutine(0xF5AF, "UnpackToPPU")
subroutine(0xF5B1, "UnpackToPPU_2")
subroutine(0xF60C, "FAROF2")
subroutine(0xF65A, "MU5")
subroutine(0xF664, "MULT3")
subroutine(0xF6BA, "MLS2")
subroutine(0xF6C2, "MLS1")
subroutine(0xF6C4, "MULTSm2")
subroutine(0xF6C6, "MULTS")
subroutine(0xF707, "MU6")
subroutine(0xF70C, "SQUA")
subroutine(0xF70E, "SQUA2")
subroutine(0xF713, "MU1")
subroutine(0xF718, "MLU1")
subroutine(0xF71D, "MLU2")
subroutine(0xF721, "MULTU")
subroutine(0xF725, "MU11")
subroutine(0xF766, "FMLTU2")
subroutine(0xF770, "FMLTU")
subroutine(0xF7AB, "MLTU2m2")
subroutine(0xF7AD, "MLTU2")
subroutine(0xF7CE, "MUT3")
subroutine(0xF7D2, "MUT2")
subroutine(0xF7D6, "MUT1")
subroutine(0xF7DA, "MULT1")
subroutine(0xF83C, "MULT12")
subroutine(0xF853, "TAS3")
subroutine(0xF86F, "MAD")
subroutine(0xF872, "ADD")
subroutine(0xF8AE, "TIS1")
subroutine(0xF8D1, "DV42")
subroutine(0xF8D4, "DV41")
subroutine(0xF8D8, "DVID4")
subroutine(0xF962, "DVID3B2")
subroutine(0xFA16, "subm_FA16")
subroutine(0xFA33, "BUMP2")
subroutine(0xFA43, "REDU2")
subroutine(0xFA55, "LL5")
subroutine(0xFA91, "LL28")
subroutine(0xFACB, "subm_FACB")
subroutine(0xFAF8, "NORM")
subroutine(0xFB89, "SetupMMC1")