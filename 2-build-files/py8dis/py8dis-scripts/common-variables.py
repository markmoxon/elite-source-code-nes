# NI% = 42			\ Sometimes need to do NI%-4

# NOSH = 8    		\ As UNIV contains 9 addresses, 0 to NOSH

# VE = &57
# LL = 29

# MSL = 1
# SST = 2
# PLT = 4
# SHU = 9
# ANA = 14
# HER = 15
# COPS = 16
# SH3 = 17
# WRM = 23
# THG = 29
# TGL = 30

# CYL = 11
# CYL2 = &18

# solaun = 9

# Variables

label(0x0000, "ZP")
label(0x0002, "RAND")
label(0x0002, "RAND_1")
label(0x0003, "RAND_2")
label(0x0004, "RAND_3")
label(0x0006, "T1")
label(0x0007, "SC")
label(0x0008, "SCH")
label(0x0009, "XX1")
label(0x0009, "INWK")
label(0x000A, "INWK_1")
label(0x000B, "INWK_2")
label(0x000C, "INWK_3")
label(0x000D, "INWK_4")
label(0x000E, "INWK_5")
label(0x000F, "INWK_6")
label(0x0010, "INWK_7")
label(0x0011, "INWK_8")
label(0x0012, "INWK_9")
label(0x0013, "INWK_10")
label(0x0014, "INWK_11")
label(0x0015, "INWK_12")
label(0x0016, "INWK_13")
label(0x0017, "INWK_14")
label(0x0018, "INWK_15")
label(0x0019, "INWK_16")
label(0x001A, "INWK_17")
label(0x001B, "INWK_18")
label(0x001C, "INWK_19")
label(0x001D, "INWK_20")
label(0x001E, "INWK_21")
label(0x001F, "INWK_22")
label(0x0020, "INWK_23")
label(0x0021, "INWK_24")
label(0x0022, "INWK_25")
label(0x0023, "INWK_26")
label(0x0024, "INWK_27")
label(0x0025, "INWK_28")
label(0x0026, "INWK_29")
label(0x0027, "INWK_30")
label(0x0028, "INWK_31")
label(0x0029, "INWK_32")
label(0x002A, "INWK_33")    # No heap, reused
label(0x002B, "INWK_34")    # No heap, reused
label(0x002C, "INWK_35")    # Used? NI% is one bigger than in Master
label(0x002D, "NEWB")
label(0x002F, "P")
label(0x0030, "P_1")
label(0x0031, "P_2")
label(0x0032, "XC")
label(0x003B, "YC")
label(0x003C, "QQ17")
label(0x003D, "K3")
label(0x003D, "XX2")
label(0x003E, "XX2_1")
label(0x003F, "XX2_2")
label(0x0040, "XX2_3")
label(0x0041, "XX2_4")
label(0x0042, "XX2_5")
label(0x0043, "XX2_6")
label(0x0044, "XX2_7")
label(0x0045, "XX2_8")
label(0x0046, "XX2_9")
label(0x0047, "XX2_10")
label(0x0048, "XX2_11")
label(0x0049, "XX2_12")
label(0x004A, "XX2_13")
label(0x004B, "K4")
label(0x004C, "K4_1")
label(0x004D, "XX16")
label(0x004E, "XX16_1")
label(0x004F, "XX16_2")
label(0x0050, "XX16_3")
label(0x0051, "XX16_4")
label(0x0052, "XX16_5")
label(0x0053, "XX16_6")
label(0x0054, "XX16_7")
label(0x0055, "XX16_8")
label(0x0056, "XX16_9")
label(0x0057, "XX16_10")
label(0x0058, "XX16_11")
label(0x0059, "XX16_12")
label(0x005A, "XX16_13")
label(0x005B, "XX16_14")
label(0x005C, "XX16_15")
label(0x005D, "XX16_16")
label(0x005E, "XX16_17")
label(0x005F, "XX0")
label(0x0060, "XX0_1")
label(0x0061, "XX19")
label(0x0061, "INF")
label(0x0062, "INF_1")
label(0x0063, "V")
label(0x0064, "V_1")
label(0x0065, "XX")
label(0x0066, "XX_1")
label(0x0067, "YY")
label(0x0068, "YY_1")
label(0x0069, "BETA")
label(0x006A, "BET1")
label(0x006B, "QQ22")
label(0x006C, "QQ22_1")
label(0x006D, "ECMA")
label(0x006E, "ALP1")
label(0x006F, "ALP2")
label(0x0070, "ALP2_1")
label(0x0071, "XX15")
label(0x0071, "X1")
label(0x0072, "Y1")
label(0x0073, "X2")
label(0x0074, "Y2")
label(0x0075, "XX15_4")
label(0x0076, "XX15_5")
label(0x0077, "XX12")
label(0x0078, "XX12_1")
label(0x0079, "XX12_2")
label(0x007A, "XX12_3")
label(0x007B, "XX12_4")
label(0x007C, "XX12_5")
label(0x007D, "K")
label(0x007E, "K_1")
label(0x007F, "K_2")
label(0x0080, "K_3")
label(0x0082, "QQ15")
label(0x0083, "QQ15_1")
label(0x0084, "QQ15_2")
label(0x0085, "QQ15_3")
label(0x0086, "QQ15_4")
label(0x0087, "QQ15_5")
label(0x0088, "K5")
label(0x0088, "XX18")
label(0x0089, "XX18_1")
label(0x008A, "XX18_2")
label(0x008B, "XX18_3")
label(0x008C, "K6")
label(0x008D, "K6_1")
label(0x008E, "K6_2")
label(0x008F, "K6_3")	    # XX18+7
label(0x0090, "K6_4")
label(0x0091, "BET2")
label(0x0092, "BET2_1")
label(0x0093, "DELTA")
label(0x0094, "DELT4")
label(0x0095, "DELT4_1")
label(0x0096, "U")
label(0x0097, "Q")
label(0x0098, "R")
label(0x0099, "S")
label(0x009A, "T")
label(0x009B, "XSAV")
label(0x009C, "YSAV")
label(0x009D, "XX17")
label(0x009E, "W")
label(0x009F, "QQ11")
label(0x00A0, "ZZ")
label(0x00A1, "XX13")
label(0x00A2, "MCNT")
label(0x00A3, "TYPE")
label(0x00A4, "ALPHA")
label(0x00A5, "QQ12")
label(0x00A6, "TGT")
label(0x00A7, "FLAG")
label(0x00A8, "CNT")
label(0x00A9, "CNT2")
label(0x00AA, "STP")
label(0x00AB, "XX4")
label(0x00AC, "XX20")
label(0x00AE, "RAT")
label(0x00AF, "RAT2")
label(0x00B0, "widget")
label(0x00B1, "Yx1M2")		# Mine = height of screen for text screens?
label(0x00B2, "Yx2M2")		# Mine = 2 x Yx1M2
label(0x00B3, "Yx2M1")
label(0x00B4, "messXC")
label(0x00B6, "newzp")

label(0x00B8, "TILE")        # Mine, contains tile number to draw into
label(0x00B9, "PATTERNS_HI") # Mine, high byte of current nametable (&70 or &74)
                             # HI(PATTERNS_0) or HI(PATTERNS_1)

label(0x00BA, "T5")         # Mine, temporary storage
label(0x00BB, "T5_1")

label(0x00D4, "ADDR1_LO")   # Mine, an address within the PPU to be poked to
label(0x00D5, "ADDR1_HI")

label(0x00E6, "NAMES_HI")   # Mine, high byte of current nametable (&70 or &74)
                            # HI(NAMES_0) or HI(NAMES_1)

label(0x00E9, "DASHBOARD_SWITCH")   # Mine, a flag to control whether we switch
                                    # to nametable 0 and palette 0 for the
                                    # dashboard

label(0x00EB, "T6")         # Mine, an address within the PPU to be poked to
label(0x00EC, "T6_1")
label(0x00ED, "T7")         # Mine, an address to fetch PPU data from
label(0x00EE, "T7_1")

label(0x00F5, "PPU_CTRL_COPY")  # Mine, contains a copy of PPU_CTRL

label(0x00F7, "BANK")        # Mine, contains lower bank number

label(0x0100, "XX3")
label(0x0101, "XX3_1")

for i in range(0, 64):
    label(0x0200 + i * 4, "SPR_" + str(i).zfill(2) + "_Y")
    label(0x0201 + i * 4, "SPR_" + str(i).zfill(2) + "_TILE")
    label(0x0202 + i * 4, "SPR_" + str(i).zfill(2) + "_ATTR")
    label(0x0203 + i * 4, "SPR_" + str(i).zfill(2) + "_X")

label(0x036A, "FRIN")
label(0x038A, "MJ")
label(0x038E, "VIEW")
label(0x0392, "EV")
label(0x039E, "TP")
label(0x039F, "QQ0")
label(0x03A0, "QQ1")
label(0x03A1, "CASH")
label(0x03A5, "QQ14")
label(0x03A7, "GCNT")
label(0x03AC, "CRGO")
label(0x03AD, "QQ20")
label(0x03BF, "BST")
label(0x03C0, "BOMB")
label(0x03C3, "GHYP")
label(0x03C6, "ESCP")
label(0x03C8, "NOMSL")
label(0x03C9, "FIST")
label(0x03CA, "AVL")
label(0x03DB, "QQ26")
label(0x03DC, "TALLY")
label(0x03DD, "TALLY_1")
label(0x03DF, "QQ21")
label(0x03E5, "NOSTM")
label(0x03F3, "DTW6")
label(0x03F4, "DTW2")
label(0x03F5, "DTW3")
label(0x03F6, "DTW4")
label(0x03F7, "DTW5")
label(0x03F8, "DTW1")
label(0x03F9, "DTW8")
label(0x03FA, "XP")
label(0x03FB, "YP")
label(0x0401, "MSTG")
label(0x044D, "QQ19")
label(0x044E, "QQ19_1")
label(0x0450, "QQ19_3")
label(0x0450, "QQ19_4")
label(0x0459, "K2")
label(0x045A, "K2_1")
label(0x045B, "K2_2")
label(0x045C, "K2_3")
label(0x045F, "QQ19_2")
label(0x046E, "BOXEDGE1")       # Mine, bitmap for drawing box edge?
label(0x046F, "BOXEDGE2")       # Mine, bitmap for drawing box edge?
label(0x0475, "CONT2_SCAN")     # Mine, if non-zero, scan controller 2
label(0x047F, "SWAP")
label(0x0481, "XSAV2")
label(0x0482, "YSAV2")
label(0x0487, "QQ24")
label(0x0488, "QQ25")
label(0x0489, "QQ28")
label(0x048A, "QQ29")
label(0x048C, "gov")
label(0x048D, "tek")
label(0x048E, "QQ2")
label(0x0494, "QQ3")
label(0x0495, "QQ4")
label(0x0496, "QQ5")
label(0x049B, "QQ8")
label(0x049C, "QQ8_1")
label(0x049D, "QQ9")
label(0x049E, "QQ10")

label(0x04A4, "QQ18_LO")    	# Mine, gets set to address of token table
label(0x04A5, "QQ18_HI")    	# that ex then accesses
label(0x04A6, "TKN1_LO")    	# Mine, gets set to address of token table
label(0x04A7, "TKN1_HI")   		# that DETOK then accesses
label(0x04A8, "LANG")  			# Mine
label(0x04AA, "CONT1_DOWN")		# Mine
label(0x04AB, "CONT2_DOWN")
label(0x04AC, "CONT1_UP")
label(0x04AD, "CONT2_UP")
label(0x04AE, "CONT1_LEFT")
label(0x04AF, "CONT2_LEFT")
label(0x04B0, "CONT1_RIGHT")
label(0x04B1, "CONT2_RIGHT")
label(0x04B2, "CONT1_A")
label(0x04B3, "CONT2_A")
label(0x04B4, "CONT1_B")
label(0x04B5, "CONT2_B")
label(0x04B6, "CONT1_START")
label(0x04B7, "CONT2_START")
label(0x04B8, "CONT1_SELECT")
label(0x04B9, "CONT2_SELECT")

label(0x04C8, "SX")
label(0x04DD, "SY")
label(0x04F2, "SZ")
label(0x0506, "BUFm1")
label(0x0507, "BUF")
label(0x0508, "BUF_1")
label(0x0561, "HANGFLAG")
label(0x0562, "MANY")
label(0x0564, "SSPR")
label(0x05A5, "SXL")
label(0x05BA, "SYL")
label(0x05CF, "SZL")
label(0x05E4, "safehouse")

label(0x0600, "Kpercent")

# NES registers

label(0x2000, "PPU_CTRL")
label(0x2001, "PPU_MASK")
label(0x2002, "PPU_STATUS")
label(0x2003, "OAM_ADDR")
label(0x2004, "OAM_DATA")
label(0x2005, "PPU_SCROLL")
label(0x2006, "PPU_ADDR")
label(0x2007, "PPU_DATA")
label(0x4014, "OAM_DMA")

label(0x4000, "SQ1_ENV")
label(0x4001, "SQ1_SWEEP")
label(0x4002, "SQ1_LO")
label(0x4003, "SQ1_HI")
label(0x4004, "SQ2_ENV")
label(0x4005, "SQ2_SWEEP")
label(0x4006, "SQ2_LO")
label(0x4007, "SQ2_HI")
label(0x4008, "TRI_CTRL")
label(0x400A, "TRI_LO")
label(0x400B, "TRI_HI")
label(0x400C, "NOI_ENV")
label(0x400E, "NOI_RAND")
label(0x400F, "NOI_LEN")
label(0x4015, "APU_FLAGS")
label(0x4016, "CONTROLLER_1")
label(0x4017, "CONTROLLER_2")

# Battery-backed WRAM in the cartridge

label(0x6000, "PATTERNS_0")     # Mine, two buffers for tile patterns
label(0x6800, "PATTERNS_1")

label(0x7000, "NAMES_0")        # Mine, two buffers for nametables
label(0x7400, "NAMES_1")

# Permanently loaded labels in 7.asm ($C000-$FFFF)

label(0xC0DF, "LC0DF")
label(0xC100, "log")
label(0xC200, "logL")
label(0xC300, "antilog")
label(0xC400, "antilogODD")
label(0xC500, "SNE")
label(0xC520, "ACT")
label(0xC53E, "XX21m2")
label(0xC53F, "XX21m1")
label(0xC540, "XX21")
label(0xCE7E, "UNIV")
label(0xCE7F, "UNIV_1")
label(0xCED0, "NAMES_LOOKUP")
label(0xCED2, "PATTERNS_LOOKUP")
label(0xD9F7, "TWOS")
label(0xDA01, "TWOS2")
label(0xDA09, "TWFL")
label(0xDA10, "TWFR")
label(0xDA18, "ylookupLO")
label(0xDAF8, "ylookupHI")
label(0xF333, "LF333")

subroutine(0xC007, "Spercent")
subroutine(0xC0AD, "RESET_BANK")    # Mine, switch bank to stack value
subroutine(0xC0AE, "SET_BANK")      # Mine, switch bank to A
subroutine(0xCD6F, "BOXEDGES")      # Mine, draw space view box edges?
subroutine(0xCC2E, "SEND_TO_PPU1")  # Mine, something to do with sending to PPU?
subroutine(0xCD34, "COPY_NAMES")    # Mine, copies nametable buffer 0 to buffer 1
subroutine(0xCE90, "GINF")
subroutine(0xCED4, "IRQ")           # Mine, IRQ handler
subroutine(0xCED5, "NMI")           # Mine, NMI handler
subroutine(0xCE9E, "sub_CE9E")
subroutine(0xCEA5, "sub_CEA5")
subroutine(0xCF2E, "SET_PALETTE")   # Mine, set PPU palette?
subroutine(0xD02D, "RESET_NAMES1")  # Mine, does this clear down nametable 1?
subroutine(0xD0F8, "CONTROLLERS")   # Mine, reads controllers
subroutine(0xD06D, "SWITCH_TO_TABLE_0")    # Mine, switches PPU to nametable/palette table 0
subroutine(0xD710, "FILL_MEMORY")   # Mine, something to do with memory filling?
subroutine(0xD986, "SEND_TO_PPU2")  # Mine, something to do with sending to PPU?
subroutine(0xDC0F, "LOIN")
subroutine(0xE4F0, "PIXEL")
subroutine(0xE543, "PIXELx2")       # Mine, draws two pixel dash in space view
subroutine(0xE596, "ECBLB2")
subroutine(0xEBA2, "DELAY")
subroutine(0xEBAD, "EXNO3")
subroutine(0xEBE5, "BOOP")
subroutine(0xEBF2, "NOISE")
subroutine(0xEC7D, "CHECK_DASHBOARD_A")	    # CHECK_DASHBOARD macro that preserves A
subroutine(0xEC8D, "LDA_XX0_Y")
subroutine(0xECA0, "LDA_EPC_Y")
subroutine(0xECAE, "INC_TALLY")     # Mine, adds KWL/KWH to TALLY

subroutine(0xECE2, "CB1D4_BANK0")
subroutine(0xECF9, "SETK_K3_XC_YC")     # Temporary name
subroutine(0xED16, "C811E_BANK6")
subroutine(0xED24, "C8021_BANK6")
subroutine(0xED24, "C8021_BANK6")
subroutine(0xED50, "C89D1_BANK6")
subroutine(0xED6B, "C8012_BANK6")
subroutine(0xED81, "CBF41_BANK5")
subroutine(0xED8F, "CB9F9_BANK4")
subroutine(0xED9D, "CB96B_BANK4")
subroutine(0xEDAB, "CB63D_BANK3")
subroutine(0xEDB9, "CB88C_BANK6")
subroutine(0xEDC7, "CA070_BANK1")
subroutine(0xEDDC, "CBA23_BANK3")
subroutine(0xEDEA, "TIDY_BANK1")
subroutine(0xEDFF, "CBC83_BANK6")
subroutine(0xEE0D, "C9522_BANK0")
subroutine(0xEE15, "CB1BE_BANK1")
subroutine(0xEE3F, "CAC25_BANK1")
subroutine(0xEE54, "CB2FB_BANK3")
subroutine(0xEE62, "CB219_BANK3")
subroutine(0xEE78, "CB9C1_BANK4")
subroutine(0xEE8B, "CA082_BANK6")
subroutine(0xEE99, "CA0F8_BANK6")
subroutine(0xEEA7, "CB882_BANK4")
subroutine(0xEEB5, "CA4A5_BANK6")
subroutine(0xEEC3, "CB2EF_BANK0")
subroutine(0xEED3, "CB9E2_BANK3")
subroutine(0xEEE8, "CB673_BANK3")
subroutine(0xEEF6, "CB2BC_BANK3")
subroutine(0xEF04, "CB248_BANK3")
subroutine(0xEF12, "CBA17_BANK6")
subroutine(0xEF20, "CAFCD_BANK3")
subroutine(0xEF35, "CBE52_BANK6")
subroutine(0xEF43, "CBED2_BANK6")
subroutine(0xEF51, "CB0E1_BANK3")
subroutine(0xEF6C, "CB18E_BANK3")
subroutine(0xEF7A, "PAS1_BANK0")
subroutine(0xEF88, "CBED7_BANK5")
subroutine(0xEF96, "CBEEA_BANK5")
subroutine(0xEFA4, "CB93C_BANK4")
subroutine(0xEFB2, "CB8F9_BANK4")
subroutine(0xEFC0, "CA2C3_BANK6")
subroutine(0xEFCE, "CBA63_BANK6")
subroutine(0xEFDC, "CB39D_BANK0")
subroutine(0xEFF7, "LL164_BANK6")
subroutine(0xF005, "CB919_BANK6")
subroutine(0xF013, "CA166_BANK6")
subroutine(0xF021, "CBBDE_BANK6")
subroutine(0xF02F, "CBB37_BANK6")
subroutine(0xF03D, "CB8FE_BANK6")
subroutine(0xF04B, "CB90D_BANK6")
subroutine(0xF059, "CA5AB_BANK6")
subroutine(0xF06F, "CEBA9_BANK0")
subroutine(0xF082, "DETOK_BANK2")
subroutine(0xF09D, "DTS_BANK2")
subroutine(0xF0B8, "CB3E8_BANK2")
subroutine(0xF0C6, "CAE18_BANK3")
subroutine(0xF0E1, "CAC1D_BANK3")
subroutine(0xF0FC, "CA730_BANK3")
subroutine(0xF10A, "CA775_BANK3")
subroutine(0xF118, "CAABC_BANK3")
subroutine(0xF126, "CA7B7_BANK3")
subroutine(0xF139, "CA9D1_BANK3")
subroutine(0xF15C, "CA972_BANK3")
subroutine(0xF171, "CAC5C_BANK3")
subroutine(0xF186, "CF186_BANK6")
subroutine(0xF194, "CB459_BANK6")
subroutine(0xF1A2, "MVS5_BANK0")
subroutine(0xF1BD, "HALL_BANK1")
subroutine(0xF1CB, "CB635_BANK2")
subroutine(0xF1E6, "DASC_BANK2")
subroutine(0xF201, "TT27_BANK2")
subroutine(0xF21C, "CB4AA_BANK2")
subroutine(0xF237, "TT27_BANK0")    # Control code part of TT27 in bank 0
subroutine(0xF245, "CA379_BANK0")
subroutine(0xF25A, "CBAF3_BANK1")
subroutine(0xF26E, "TT66_BANK0")
subroutine(0xF280, "CA65D_BANK1")
subroutine(0xF293, "CB341_BANK3")
subroutine(0xF2A8, "SCAN_BANK1")
subroutine(0xF2BD, "C8926_BANK0")
subroutine(0xF2CE, "CCD34_BANK0")
subroutine(0xF2DE, "CLYNS")
subroutine(0xF338, "sub_CF338")
subroutine(0xF359, "sub_CF359")
subroutine(0xF3BC, "sub_CF3BC")
subroutine(0xF42A, "sub_CF42A")
subroutine(0xF42E, "Ze")
subroutine(0xF454, "sub_CF454")
subroutine(0xF46A, "sub_CF46A")
subroutine(0xF473, "NLIN4")
subroutine(0xF4AC, "DORND2")
subroutine(0xF4AD, "DORND")
subroutine(0xF4C1, "PROJ")
subroutine(0xF65A, "MU5")
subroutine(0xF664, "MULT3")
subroutine(0xF6BA, "MLS2")
subroutine(0xF6C2, "MLS1")
subroutine(0xF6C4, "MULTSm2")
subroutine(0xF6C6, "MULTS")
subroutine(0xF707, "MU6")
subroutine(0xF70C, "SQUA")
subroutine(0xF70E, "SQUA2")
subroutine(0xF713, "MU1")
subroutine(0xF718, "MLU1")
subroutine(0xF71D, "MLU2")
subroutine(0xF721, "MULTU")
subroutine(0xF725, "MU11")
subroutine(0xF766, "FMLTU2")
subroutine(0xF770, "FMLTU")
subroutine(0xF7AB, "MLTU2m2")
subroutine(0xF7AD, "MLTU2")
subroutine(0xF7D2, "MUT2")
subroutine(0xF7D6, "MUT1")
subroutine(0xF7DA, "MULT1")
subroutine(0xF83C, "MULT12")
subroutine(0xF853, "TAS3")
subroutine(0xF86F, "MAD")
subroutine(0xF872, "ADD")
subroutine(0xF8AE, "TIS1")
subroutine(0xF8D1, "DV42")
subroutine(0xF8D4, "DV41")
subroutine(0xF962, "DVID3B2")
subroutine(0xFA55, "LL5")
subroutine(0xFA91, "LL28")
subroutine(0xFAF8, "NORM")
